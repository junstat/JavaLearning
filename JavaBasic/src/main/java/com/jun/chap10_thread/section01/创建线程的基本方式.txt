1. 线程的创建方式一: 继承Thread类
1.1 步骤
1) 创建一个继承于Thread类的子类
2) 重写Thread类的run() -> 将此线程要执行的操作，声明在此方法体中
3) 创建当前Thread的子类的对象
4) 通过对象调用start(): 1.启动线程 2.调用当前线程的run()方法

1.2 例题: 创建一个分线程1，用于遍历100以内的偶数
【拓展】再创建一个分线程2，用于遍历100以内的奇数

2. 线程的创建方式二: 实现Runnable接口
2.1 步骤
1) 创建一个实现Runnable接口的类
2) 实现接口中的run()-> 将此线程要执行的操作，声明在此方法体中
3) 创建当前Thread的子类的对象
4) 将此对象作为参数传递到Thread类的构造器中，创建Thread类的实例
5) Thread类的实例调用start()

3. 对比两种方式?
    共同点: 1) 启动线程，使用的都是Thread类中定义的start()
           2) 创建的线程对象，都是Thread类或其之类的实例

    不同点: 一个是类的继承，一个是接口的实现
         建议: 使用实现Runnable接口的方式
         Runnable方式的好处: 1) 实现的方式，避免类的单继承的局限性，2) 更适合处理有共享数据的问题
                           3) 实现了代码和数据的分离

    联系: public class Thread implements Runnable (代理模式)